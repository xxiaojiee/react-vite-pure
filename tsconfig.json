{
  "compilerOptions": {
    // ↓指定ECMAScript目标版本，esnext为最新版本
    "target": "ESNext",
    // ↓指定生成哪个模块系统代码，esnext为最新版本
    "module": "ESNext",
    // ↓决定如何处理模块。
    "moduleResolution": "Node",
    // ↓启用所有严格类型检查选项。
    "strict": true,
    // 不包含默认的库文件 默认值: false
    "noLib": false,
    // ↓禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,
    // ↓允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // 禁用函数类型的双向协变检查 默认值: false
    "strictFunctionTypes": false,
    // ↓在 .tsx文件里支持JSX
    "jsx": "react",
    // ↓解析非相对模块名的基准目录。查看 模块解析文档了解详情。
    "baseUrl": ".",
    // ↓允许编译javascript文件。
    "allowJs": true,
    // 生成相应的 .map 文件 默认值: false
    "sourceMap": true,
    //发出 importStar 和importDefault 帮助程序代码 用于运行时 Babel 生态系统兼容性，并实现--allowSyntheticDefaultImports 类型系统兼容性。默认值: false
    "esModuleInterop": true,
    // 模块导入 import 可以导入 .json 文件 默认值: false
    "resolveJsonModule": true,
    // 报告未使用的本地错误。 默认值: false
    "noUnusedLocals": true,
    // 若有未使用的参数则抛错。 默认值: false
    "noUnusedParameters": true,
    // 启用实验性的ES装饰器。默认值: false
    "experimentalDecorators": true,
    // ↓编译过程中需要引入的库文件的列表。
    "lib": ["DOM", "ESNext"],
    // 在表达式和声明上有隐含的 any 类型时报错。 默认值: false
    "noImplicitAny": false,
    // ↓忽略所有的声明文件（ *.d.ts）的类型检查。
    "skipLibCheck": false,
    // ↓/指定引入的类型声明文件，默认是自动引入所有声明文件，一旦指定该选项，则会禁用自动引入，改为只引入指定的类型声明文件，如果指定空数组[]则不引用任何文件
    "types": [
      // 引入 vite/client 的类型声明
      "vite/client"
    ],
    // 删除所有注释，除了以 /!*开头的版权信息 默认值: false
    "removeComments": true,
    // ↓指定模块的路径，和baseUrl有关联，和webpack中resolve.alias配置一样
    "paths": {
      "/@/*": ["src/*"],
      "/#/*": ["types/*"]
    }
  },
  // ↓指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
  "include": [
    "tests/**/*.ts",
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "types/**/*.d.ts",
    "types/**/*.ts",
    "build/**/*.ts",
    "build/**/*.d.ts",
    "mock/**/*.ts",
    "vite.config.ts"
  ],
  // 指定一个排除列表（include的反向操作）
  "exclude": ["node_modules", "tests/server/**/*.ts", "dist", "**/*.js"]
}
